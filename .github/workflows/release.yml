name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
    
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      # Extract current version from package.json
      - name: Get current version
        id: current_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
      # Check if release already exists and find next available version
      - name: Check existing releases
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the base version from package.json
          BASE_VERSION="${{ steps.current_version.outputs.VERSION }}"
          echo "Base version from package.json: $BASE_VERSION"
          
          # Split into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$BASE_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          # Initialize variables
          NEW_PATCH=$PATCH
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          # Use a safer method to check if release exists
          echo "Checking if release v$NEW_VERSION exists..."
          if gh release view v$NEW_VERSION &>/dev/null; then
            echo "Release v$NEW_VERSION exists. Finding next available version..."
            
            # Keep incrementing until we find an unused version
            while gh release view v$NEW_VERSION &>/dev/null; do
              echo "Release v$NEW_VERSION exists, incrementing..."
              NEW_PATCH=$((NEW_PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            done
          fi
          
          echo "Using version: v$NEW_VERSION"
          echo "RELEASE_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      # Build the application
      - name: Build
        run: npm run build
      
      # Create zip archive with release version
      - name: Create zip archive
        run: |
          cd dist
          zip -r ../jdoc-app-v${{ steps.check_release.outputs.RELEASE_VERSION }}.zip .
          cd ..
      
      # Create Release and Upload Asset
      - name: Create Release and Upload Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release with gh CLI
          RELEASE_VERSION="${{ steps.check_release.outputs.RELEASE_VERSION }}"
          echo "Creating release for version: v$RELEASE_VERSION"
          
          gh release create v$RELEASE_VERSION \
            --title "Release v$RELEASE_VERSION" \
            --notes "Release of JDoc App v$RELEASE_VERSION" \
            jdoc-app-v$RELEASE_VERSION.zip
      
      # Configure Git for creating the version bump branch
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      # Create a new branch for version bump to next version
      - name: Create version bump branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the version we just released
          RELEASED_VERSION="${{ steps.check_release.outputs.RELEASE_VERSION }}"
          
          # Split into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$RELEASED_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          # Increment patch version for next development cycle
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
          echo "Next development version will be: $NEXT_VERSION"
          
          # Create a new branch for the version bump
          git checkout -b version-bump-$NEXT_VERSION
          
          # Update package.json with new version
          npm version $NEXT_VERSION --no-git-tag-version
          
          # Commit the changes
          git add package.json package-lock.json
          git commit -m "Bump version to $NEXT_VERSION for next development cycle"
          
          # Push the branch
          git push origin version-bump-$NEXT_VERSION
          
          # Create a PR for the version bump
          gh pr create \
            --title "Bump version to $NEXT_VERSION for next development cycle" \
            --body "This PR updates the version number to prepare for the next development cycle." \
            --base main \
            --head version-bump-$NEXT_VERSION