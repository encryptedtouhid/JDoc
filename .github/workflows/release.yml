name: Build and Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
    
jobs:
  build-and-release:
    # Only run when PR is merged (not when just closed without merging)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # We need full history for versioning
      
      - name: Debug PR information
        run: |
          echo "PR Base Branch: ${{ github.event.pull_request.base.ref }}"
          echo "PR Head Branch: ${{ github.event.pull_request.head.ref }}"
          echo "PR Merged: ${{ github.event.pull_request.merged }}"
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR State: ${{ github.event.pull_request.state }}"
      
      # Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      # Extract current version from package.json
      - name: Get current version
        id: current_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
      # Build the application with current version
      - name: Build
        run: npm run build
      
      # Create zip archive with current version
      - name: Create zip archive
        run: |
          cd dist
          zip -r ../jdoc-app-v${{ steps.current_version.outputs.VERSION }}.zip .
          cd ..
      
      # Create Release and Upload Asset with current version
      - name: Create Release and Upload Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Format PR body for release notes (escape newlines and quotes)
          PR_BODY=$(echo "${{ github.event.pull_request.body || 'No description provided' }}" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          
          # Create release with gh CLI
          gh release create v${{ steps.current_version.outputs.VERSION }} \
            --title "Release v${{ steps.current_version.outputs.VERSION }}" \
            --notes "Release of JDoc App v${{ steps.current_version.outputs.VERSION }}\n\nChanges in this release:\n${{ github.event.pull_request.title }}\n\n$PR_BODY" \
            jdoc-app-v${{ steps.current_version.outputs.VERSION }}.zip
      
      # Create a new branch for version bump
      - name: Create version bump branch
        run: |
          # Split into parts
          CURRENT_VERSION="${{ steps.current_version.outputs.VERSION }}"
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version will be: $NEW_VERSION"
          
          # Create a new branch for the version bump
          git checkout -b version-bump-$NEW_VERSION
          
          # Update package.json with new version
          npm version $NEW_VERSION --no-git-tag-version
          
          # Commit the changes
          git add package.json package-lock.json
          git commit -m "Bump version to $NEW_VERSION for next development cycle"
          
          # Push the branch
          git push origin version-bump-$NEW_VERSION
          
          # Create a PR for the version bump
          gh pr create \
            --title "Bump version to $NEW_VERSION for next development cycle" \
            --body "This PR updates the version number to prepare for the next development cycle." \
            --base main \
            --head version-bump-$NEW_VERSION