name: Build and Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  pull-requests: read
    
jobs:
  build-and-release:
    # Only run when PR is merged (not when just closed without merging)
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' && github.event.pull_request.head.ref == 'dev'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # We need full history for versioning
      
      # Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      # Auto-increment version
      - name: Auto-increment version
        id: version
        run: |
          # Get the current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Split into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update package.json with new version
          npm version $NEW_VERSION --no-git-tag-version
          
          # Set output for later steps
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      # Build the application
      - name: Build
        run: npm run build
      
      # Create zip archive
      - name: Create zip archive
        run: |
          cd dist
          zip -r ../jdoc-app-v${{ steps.version.outputs.VERSION }}.zip .
          cd ..
      
      # Commit version bump back to the repository
      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "Bump version to ${{ steps.version.outputs.VERSION }} [skip ci]"
          git push origin main
      
      # Create Release and Upload Asset
      - name: Create Release and Upload Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Format PR body for release notes (escape newlines and quotes)
          PR_BODY=$(echo "${{ github.event.pull_request.body }}" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          
          # Create release with gh CLI
          gh release create v${{ steps.version.outputs.VERSION }} \
            --title "Release v${{ steps.version.outputs.VERSION }}" \
            --notes "Release of JDoc App v${{ steps.version.outputs.VERSION }}\n\nChanges in this release:\n${{ github.event.pull_request.title }}\n\n$PR_BODY" \
            jdoc-app-v${{ steps.version.outputs.VERSION }}.zip